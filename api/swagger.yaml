openapi: 3.0.0
info:
  title: Blog API
  description: This is a blog API
  contact:
    email: dzenancindrak@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: "{server}"
    variables:
      server:
        default: https://blog-api.cindrak.com
tags:
  - name: posts
    description: everything related to posts
  - name: healthCheck
    description: everything related to health-check
paths:
  /:
    get:
      tags:
        - healthCheck
      summary: Health check
      description: |
        This requests is for health check purpose.
      operationId: healthCheck
      responses:
        "200":
          description: server is alive
        "500":
          description: server id dead
  /posts:
    get:
      tags:
        - posts
      summary: Get all posts
      description: |
        This requests get all the posts from the db.
      operationId: getPosts
      responses:
        "200":
          description: all the posts in a json array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                x-content-type: application/json
        "400":
          description: bad input parameter
    post:
      tags:
        - posts
      summary: Add a post
      description: Adds a post
      operationId: addPost
      requestBody:
        description: Post to add in json format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        "201":
          description: Post created
        "400":
          description: Bad request
        "409":
          description: An existing post already exists
      security:
        - oAuth:
            - openid
            - profile
            - email
            - offline_access
  /posts/{postId}:
    get:
      tags:
        - posts
      summary: Get a post by ID
      operationId: getPost
      parameters:
        - name: postId
          in: path
          description: ID of the post to get
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "404":
          description: Post does not exist
    delete:
      tags:
        - posts
      summary: Delete a post by ID
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: ID of the post to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Post deleted
        "400":
          description: Bad request
        "404":
          description: Post does not exist
      security:
        - oAuth:
            - openid
            - profile
            - email
            - offline_access
    patch:
      tags:
        - posts
      summary: Update a post by ID
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          description: ID of the post to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Post to modify in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        "200":
          description: Post deleted
        "400":
          description: Bad request
        "404":
          description: Post does not exist
      security:
        - oAuth:
            - openid
            - profile
            - email
            - offline_access
components:
  schemas:
    Post:
      required:
        - author
        - content
        - dateCreated
        - dateUpdated
        - header
        - id
        - tags
        - title
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        title:
          type: string
          example: How to setup kubernetes
        tags:
          maxItems: 10
          minItems: 1
          type: array
          example:
            - devops
            - kubernetes
          items:
            type: string
        header:
          type: string
          example: How to create a VM on Azure
        content:
          type: string
          example: Lorem ipsum
        author:
          type: string
          example: Dzenan Cindrak
        dateCreated:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        dateUpdated:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
      example:
        dateCreated: 2016-08-29T09:12:33.001Z
        author: Dzenan Cindrak
        header: How to create a VM on Azure
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
        title: How to setup kubernetes
        content: Lorem ipsum
        tags:
          - devops
          - kubernetes
        dateUpdated: 2016-08-29T09:12:33.001Z
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow.
      flows:
        implicit:
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            openid: openid required scope
            profile: acess to basic user info
            email: access to user email
            offline_access: offline access to data