/*
 * Blog API
 *
 * This is a blog API
 *
 * API version: 1.0.0
 * Contact: dzenancindrak@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package blog

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"github.com/gookit/validate"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"io/ioutil"
	"log"
	"net/http"
	"path"
	"strings"
	"time"
)

const CollectionName = "posts"

func AddPost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	var newPost Post

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	db := (*ctx).Value("db").(*mongo.Database)

	b, err := ioutil.ReadAll(r.Body)

	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
	}

	if err = json.Unmarshal(b, &newPost); err != nil {
		w.WriteHeader(http.StatusBadRequest)
	}

	newPost.DateCreated = time.Now().Format("2006-01-02")

	newPost.DateUpdated = time.Now().Format("2006-01-02")

	newPost.Id = uuid.New().String()

	v := validate.Struct(newPost)

	if v.Validate() {

		_, err = db.Collection(CollectionName).InsertOne(context.Background(), newPost)

		if mongo.IsDuplicateKeyError(err) {
			w.WriteHeader(http.StatusConflict)
		} else if err != nil {
			w.WriteHeader(http.StatusBadRequest)
		} else {
			resp := make(map[string]string)
			resp["id"] = newPost.Id
			w.WriteHeader(http.StatusOK)
			jsonId, err := json.Marshal(resp)
			if err != nil {
				return
			}
			w.Write(jsonId)
		}

	} else {
		w.WriteHeader(http.StatusBadRequest)
	}
}

func DeletePost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	db := (*ctx).Value("db").(*mongo.Database)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	id := path.Base(r.URL.Path)

	deletedCount, err := db.Collection(CollectionName).DeleteOne(context.Background(), bson.D{primitive.E{Key: "_id", Value: id}})

	if err != nil {

		w.WriteHeader(http.StatusInternalServerError)

	} else if deletedCount.DeletedCount == 0 {

		w.WriteHeader(http.StatusNotFound)

	} else {

		w.WriteHeader(http.StatusOK)
	}
}

func GetPost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	switch r.Method {

	case http.MethodOptions:

		w.WriteHeader(http.StatusOK)

	case http.MethodGet:

		var resPost Post
		db := (*ctx).Value("db").(*mongo.Database)

		w.Header().Set("Content-Type", "application/json; charset=UTF-8")

		id := path.Base(r.RequestURI)

		err := db.Collection(CollectionName).FindOne(context.Background(), bson.D{primitive.E{Key: "_id", Value: id}}).Decode(&resPost)

		if err == mongo.ErrNoDocuments {

			w.WriteHeader(http.StatusNotFound)

		} else if err != nil {

			w.WriteHeader(http.StatusInternalServerError)

			panic(err)

		} else {

			data, err := json.Marshal(resPost)

			if err != nil {

				panic(err)

			}

			write, err := w.Write(data)

			if err != nil {

				fmt.Println(write)

				panic(err)

			}

		}
	}

}

func GetPosts(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	switch r.Method {

	case http.MethodOptions:

		w.WriteHeader(http.StatusOK)

	case http.MethodGet:

		if r.Method == strings.ToUpper("Options") {

		} else {

			var posts []Post

			db := (*ctx).Value("db").(*mongo.Database)

			w.Header().Add("Content-Type", "application/json; charset=UTF-8")

			opts := options.Find().SetSort(bson.D{primitive.E{Key: "dateUpdated", Value: 1}})

			cur, err := db.Collection(CollectionName).Find(context.Background(), bson.D{{}}, opts)

			if err != nil {
				w.WriteHeader(http.StatusBadRequest)
			}

			for cur.Next(context.TODO()) {
				var post Post
				err := cur.Decode(&post)
				if err != nil {
					log.Fatal(err)
				}
				posts = append(posts, post)

			}

			data, err := json.Marshal(posts)

			if err != nil {
				panic(err)
			}

			w.WriteHeader(http.StatusOK)

			write, err := w.Write(data)

			if err != nil {
				fmt.Println(write)
				panic(err)

			}
		}

	}
}

func UpdatePost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	var newPost Post

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	db := (*ctx).Value("db").(*mongo.Database)

	b, err := ioutil.ReadAll(r.Body)

	if err != nil {
		panic(err)
	}

	if err = json.Unmarshal(b, &newPost); err != nil {
		panic(err)
	}

	v := validate.Struct(newPost)

	if v.Validate() {

		newPost.DateUpdated = time.Now().Format("2006-01-02")

		updateCount, err := db.Collection(CollectionName).UpdateOne(context.Background(), bson.D{primitive.E{Key: "_id", Value: newPost.Id}}, bson.M{"$set": newPost})
		if err != nil {
			log.Fatal(err)
		} else if updateCount.MatchedCount == 0 {
			w.WriteHeader(http.StatusNotFound)
		} else {
			w.WriteHeader(http.StatusOK)
		}
	} else {
		w.WriteHeader(http.StatusBadRequest)
	}

}
