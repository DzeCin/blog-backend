/*
 * Blog API
 *
 * This is a blog API
 *
 * API version: 1.0.0
 * Contact: dzenancindrak@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package blog

import (
	"context"
	"encoding/json"
	"fmt"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"io/ioutil"
	"log"
	"net/http"
	"path"
)

const CollectionName = "posts"

func AddPost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	var newPost Post

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	db := (*ctx).Value("db").(*mongo.Database)

	b, err := ioutil.ReadAll(r.Body)

	if err != nil {
		panic(err)
	}

	if err = json.Unmarshal(b, &newPost); err != nil {
		panic(err)
	}

	_, err = db.Collection(CollectionName).InsertOne(context.Background(), newPost)

	if mongo.IsDuplicateKeyError(err) {
		w.WriteHeader(http.StatusConflict)
	} else if err != nil {
		panic(err)
	} else {
		w.WriteHeader(http.StatusOK)
	}

}

func DeletePost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {
	db := (*ctx).Value("db").(*mongo.Database)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	id := path.Base(r.URL.Path)

	deletedCount, err := db.Collection(CollectionName).DeleteOne(context.Background(), bson.D{{"_id", id}})

	if err != nil {

		w.WriteHeader(http.StatusInternalServerError)

		panic(err)

	} else if deletedCount.DeletedCount == 0 {

		w.WriteHeader(http.StatusNotFound)

	} else {

		w.WriteHeader(http.StatusOK)
	}
}

func GetPost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	var resPost Post

	db := (*ctx).Value("db").(*mongo.Database)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	id := path.Base(r.RequestURI)

	err := db.Collection(CollectionName).FindOne(context.Background(), bson.D{{"_id", id}}).Decode(&resPost)

	if err == mongo.ErrNoDocuments {

		w.WriteHeader(http.StatusNotFound)

	} else if err != nil {

		w.WriteHeader(http.StatusInternalServerError)

		panic(err)

	} else {

		data, err := json.Marshal(resPost)

		if err != nil {

			panic(err)

		}

		write, err := w.Write(data)

		if err != nil {

			fmt.Println(write)

			panic(err)

		}

	}

}

func GetPosts(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	var posts []Post

	db := (*ctx).Value("db").(*mongo.Database)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	opts := options.Find().SetSort(bson.D{{"dateUpdated", 1}})

	cur, err := db.Collection(CollectionName).Find(context.Background(), bson.D{{}}, opts)

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Fatal(err)
	}

	for cur.Next(context.TODO()) {
		var post Post
		err := cur.Decode(&post)
		if err != nil {
			log.Fatal(err)
		}
		posts = append(posts, post)

	}

	data, err := json.Marshal(posts)

	if err != nil {
		panic(err)
	}

	w.WriteHeader(http.StatusOK)

	write, err := w.Write(data)

	if err != nil {
		fmt.Println(write)
		panic(err)

	}

}

func UpdatePost(w http.ResponseWriter, r *http.Request, ctx *context.Context) {

	var newPost Post

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	db := (*ctx).Value("db").(*mongo.Database)

	b, err := ioutil.ReadAll(r.Body)

	if err != nil {
		panic(err)
	}

	if err = json.Unmarshal(b, &newPost); err != nil {
		panic(err)
	}

	updateCount, err := db.Collection(CollectionName).UpdateByID(context.Background(), bson.D{{"_id", newPost.Id}}, newPost)

	if err != nil {
		log.Fatal(err)
	} else if updateCount.MatchedCount == 0 {
		w.WriteHeader(http.StatusNotFound)
	} else {
		w.WriteHeader(http.StatusOK)
	}
}
